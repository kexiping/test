'''
位运算：
& | ^ ~ << >>
& 类似 and
'''
n1 = 0b0110 # 6
n2 = 0b0010 # 2
print('*-'*20)
print(n1 & n2)
'''
1为真 0 为假
n1 = 0b0110 # 6
n2 = 0b0010 # 2
'''
print(n1 | n2)
# 异或^： 上下两个位数相同为0 不同为1

#取反
n1 = 0b0110 # 6
n2 = 0b0010 # 2
print('*-'*20)
print(~n1 )
print(~n2 )
'''
n1 = 0b0110
bit byte ,1byte= 8 bit
000000000000000000000000000000000000....0010
n = 2
1G= 1024M 
二进制的负数表示
原码：0110
反码：1001
补码： 反码加1
1001
+  1
-----------
1010
1.已知十进制负数，求二进制负数
   1.正数的原码2.原码取反3.加1-----》得到的二进制就是负数的二进制
   -7的进制
   步骤：
   1.先求+7的二进制：0000 0111原码
   2.反码:1111 1000
   3.补码:1111 1001
   -7的二进制是1111 10001
2.已知二进制的负数（判断是否是负的二进制的依据，看二进制的最高位:1111 1010,最高位是1则为负数，0则为正数），求对应的十进制
  1.二进制（负的） 2.二进制减一 3.取反 4.原码 将原码转成十进制，在十进制的前面添加负号：-
'''

